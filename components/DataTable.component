<apex:component controller="DataTableController">
    <apex:attribute name="ObjectType" type="String" description="Object type to build data table for." />
    <apex:attribute name="ObjectLabel" type="String" description="Object label"/>
    <apex:attribute name="ShowExportButton" type="Boolean" description="By default the Export Button will show. Pass in false to turn it off" default="true"/>
    <script src="/soap/ajax/10.0/connection.js"> </script >
    <script src="/soap/ajax/10.0/apex.js"> </script >
    <!-- <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/jquery.dataTables.min.js"></script> -->
    <script type="text/javascript" src="https://cdn.datatables.net/r/dt/jq-2.1.4,jszip-2.5.0,pdfmake-0.1.18,dt-1.10.9,af-2.0.0,b-1.0.3,b-colvis-1.0.3,b-html5-1.0.3,b-print-1.0.3,se-1.0.1/datatables.min.js"></script>
    <apex:stylesheet value="//cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/css/jquery.dataTables.min.css" />
    <style type="text/css">
        .table-container {
            border: 1px solid #e5e5e5;
            padding: 1rem;
        }
        .table.dataTable.no-footer {
            border-bottom: 0px transparent;
        }
        thead tr th {
            border-top: 1px solid #e5e5e5;
            border-bottom: 1px solid #e5e5e5 !important;
        }
        thead tr th:first-child {
            border-left: 1px solid #e5e5e5;
            /*border-bottom: 1px solid #e5e5e5 !important;*/
        }
        thead tr th:last-child {
            border-right: 1px solid #e5e5e5;
            /*border-bottom: 1px solid #e5e5e5 !important;*/
        }
        div.form-group label {
            /*width: inherit !important;*/
        }
        div.dataTables_paginate {
            text-align: center !important;
            float: none !important;
        }
        a#DataTables_Table_0_previous {
            color: #0076be !important;
        }
        a#DataTables_Table_0_next {
            color: #0076be !important;
        }
        a#DataTables_Table_0_previous.disabled {
            display: none !important;
        }
        a#DataTables_Table_0_next.disabled {
            display: none !important;
        }
        .dataTables_wrapper .dataTables_paginate .paginate_button.current{
            background: none;
            color: #0076be !important;
            font-weight: 700;
        }
        .dataTables_wrapper .dataTables_paginate .paginate_button {
            font-weight: 400;
        }
        #DataTables_Table_0_wrapper {
            overflow-x: auto;
        }
        select {
            display: inline-block;
            vertical-align: middle;
            position: relative;
            text-align: left;
            width: 100%;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            background: transparent;
            color: #5e6367;
            line-height: 1.5;
            font-size: 1rem;
            -webkit-font-smoothing: antialiased;
            border: 1px solid #e5e5e5;
            border-top-left-radius: 2px;
            border-top-right-radius: 2px;
            padding-right: 3rem;
            display: block;
            position: relative;
            cursor: pointer;
            padding: 0.5rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            height: 42px;
        }
        
        /* Dropdown Button */
.dropbtn {
    background-color: #4CAF50;
    color: white;
    padding: 16px;
    font-size: 16px;
    border: none;
    cursor: pointer;
}

/* Dropdown button on hover and focus */
.dropbtn:hover, .dropbtn:focus {
    background-color: #3e8e41;
}

/* The container div needed to position the dropdown content */
.dropdown {
    position: relative;
    display: inline-block;
}

/* Dropdown Content (Hidden by Default) */
.dropdown-content {
    display: none;
    position: absolute;
    /*bottom: 18px;*/
    background-color: #f9f9f9;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    z-index: 1;
}

/* Links inside the dropdown */
.dropdown-content a {
    color: white;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    text-decoration: none;
}

/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: #004672;color:white;text-decoration: none;}

     .show {display:block;}
     
     

    </style>
    <script>
    sforce.connection.sessionId = '{!$Api.Session_ID}';
    var csvData;
    var createdDateColumnIndex;

    Array.prototype.addUnique = function(item) {
        // prototype function to assist with adding unique items
        if(this.indexOf(item)==-1){//no duplicates
            this.push(item);
        }
    }

    String.prototype.replaceAll = function(search, replacement) {
        var target = this;
        return target.replace(new RegExp(search, 'g'), replacement);
    };

    function dynamicSort(property) {
        var sortOrder = 1;
        if (property[0] === "-") {
            sortOrder = -1;
            property = property.substr(1);
        }
        return function(a, b) {
            var result = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
            return result * sortOrder;
        }
    }

    function cleanDate(value) {
        var result;
        var timestamp=Date.parse(value);
        if(isNaN(timestamp) == false){
            result = new Date(timestamp);
        }
        return result;
    }

    function getNewRecordURL() {
        if('{!ObjectType}' == 'Account') {
            //return '/apex/AccountNewRedirectPortal';
            return '#';
        }
        else if('{!ObjectType}' == 'Opportunity') {
            return '{!URLFOR($Action.Opportunity.New)}';
        }
        else if('{!ObjectType}' == 'Contact') {
            return '{!URLFOR($Action.Contact.NewContact)}';
        }
    }

    function buildLink(fieldValue, recordId) {
        var link;
        if('{!ObjectType}' == 'Purchase_Order__c') {
            link = '<td><a href="/' + recordId + '" target="_blank">' + (fieldValue != null ? fieldValue : '') + '</a></td>';
        } else {
            link = '<td><a href="/' + recordId + '">' + (fieldValue != null ? fieldValue : '') + '</a></td>';
        }
        return link;
    }

    $.fn.dataTableExt.afnFiltering.push(
        function( settings, data, dataIndex ) {
            var min = cleanDate($('#min').val());
            var max = cleanDate($('#max').val());
            var date = cleanDate(data[createdDateColumnIndex]);
            if(min && max) {
                return min <= date && max >= date;
            }
            else if(min && !max) {
                return min <= date;
            }
            else if(!min && max) {
                return max >= date;
            }
            else if(!min && !max) {
                return true;
            }
            else {
                return false;
            }
        }
    );
    
    /* When the user clicks on the button, 
toggle between hiding and showing the dropdown content */
function accDropDown() {
    if('{!ObjectLabel}'=='Account'){
    console.log('==btn height=='+document.getElementById("newRecordButton").offsetHeight);
    console.log('==btn height=='+'{!recordTypeLinks}');
    d= document.getElementById("myDropdown");
    d.innerHTML = '{!recordTypeLinks}';
    d.className += ' show';
    }
}

// Close the dropdown menu if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.btn')) {

    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}
    
    $(document).ready(function() {
        // show/hide filters
        if('{!ObjectType}' != 'Account' && '{!ObjectType}' != 'Opportunity') {
            $("#typeFilter").hide();
        }

        if('{!ObjectType}' == 'Opportunity' || '{!ObjectType}' == 'Residential_Project__c' || '{!ObjectType}' == 'Purchase_Order__c') {
            $('#newRecordButton').hide();
        }

        if('{!ObjectType}' == 'Account' && ('{!userProfileName}' == 'Partner TPS - DRIP' || '{!userProfileName}' == 'Partner TPS - IP')) {
            $('#newRecordButton').hide();
        }

        $("#newRecordButton").attr("href", getNewRecordURL());
        // Create dropdown to list List View names
        var listViewSelect = $('<select class="select-dropdown cs-skin-border"/>');
        listViewSelect.appendTo('#selectListView');
        listViewSelect.change(function() { // On change...
            $("#spinner").show();
            $("#listview").hide();

            // Selected Object
            // var objectName = $('#selectObject').find('option:selected').val();
            var objectName = '{!ObjectType}';

            // Selected List View
            var listViewId = $(this).find('option:selected').val();
            if (listViewId == undefined)
                return;
            var fullRecordList = [];
            var allRecordIds = [];

            // List View describe to take a look at the SOQL!
            $.ajax({
                url: '/services/data/v32.0/sobjects/' + objectName + '/listviews/' + listViewId + '/describe',
                headers: {
                    'Authorization': 'Bearer {!$Api.Session_ID}'
                },
                datatype: 'json',
                success: function(data, textStatus, jqXHR) {
                    $('#soql').text(data.query);
                    queryRecords(data.query);
                }
            });

            var queryRecords = function(soqlStr) {
                // soqlStr = soqlStr.replace(/%/g, "%25");
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DataTableController.getRecords}', soqlStr, null, function(result, event) {
                    if (event.status) {
                        // fullRecordList = fullRecordList.concat(result.payload);
                        // buildDataTable();
                        fullRecordList = fullRecordList.concat(result.payload);
                        if(result.payloadMap.done === false) {
                            getMoreRecords(soqlStr, result.payload[result.payload.length - 1].Id);
                        }
                        else {
                            buildDataTable();
                        }
                    } else if (event.type === 'exception') {
                        console.log(event.message, event.where);
                    } else {
                        console.log(event.message);
                    }
                });
                // $.ajax({
                //     url: '/services/data/v32.0/query/?q=' + soqlStr,
                //     headers: {
                //         'Authorization': 'Bearer {!$Api.Session_ID}'
                //     },
                //     datatype: 'json',
                //     success: function(data, textStatus, jqXHR) {
                //         // console.log(data.records);
                //         // fullRecordList = fullRecordList.concat(data.records);
                //         // if (data.nextRecordsUrl) {
                //         //     getMoreRecords(data.nextRecordsUrl);
                //         // } else {
                //         //     buildDataTable();
                //         // }
                //     }
                // });
            }

            var getMoreRecords = function(soqlStr, lastRecordId) {
                Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.DataTableController.getRecords}', soqlStr, lastRecordId, function(result, event) {
                    if (event.status) {
                        fullRecordList = fullRecordList.concat(result.payload);
                        if(result.payloadMap.done === false) {
                            fullRecordList = fullRecordList.concat(result.payload);
                            getMoreRecords(soqlStr, result.payload[result.payload.length - 1].Id);
                        }
                        else {
                            buildDataTable();
                        }
                    } else if (event.type === 'exception') {
                        console.log(event.message, event.where);
                    } else {
                        console.log(event.message);
                    }
                });
                // $.ajax({
                //     url: nextRecordsUrl,
                //     headers: {
                //         'Authorization': 'Bearer {!$Api.Session_ID}'
                //     },
                //     datatype: 'json',
                //     success: function(data, textStatus, jqXHR) {
                //         fullRecordList = fullRecordList.concat(data.records);
                //         if (data.nextRecordsUrl) {
                //             getMoreRecords(data.nextRecordsUrl);
                //         } else {
                //             buildDataTable();
                //         }
                //     }
                // });
            }

            var buildDataTable = function() {
                csvData = [];
                var typeSelectOptions = [];
                var stageSelectOptions = [];
                // Call the List View API to get the results (also includes column definitions)
                $.ajax({
                    url: '/services/data/v32.0/sobjects/' + objectName + '/listviews/' + listViewId + '/results?limit=10',
                    headers: {
                        'Authorization': 'Bearer {!$Api.Session_ID}'
                    },
                    datatype: 'json',
                    success: function(data, textStatus, jqXHR) {

                        // Clear current List View info
                        $('#listview').empty();
                        $('#selectType').empty();
                        $('#selectStage').empty();

                        // Create the table and add columns
                        var table = $('<table class="table"></table>');
                        var thead = $('<thead></thead>');
                        var theadtr = $('<tr></tr>');
                        var defaultSortIndex = 0;
                        var typeColumnIndex;
                        var stageColumnIndex;
                        createdDateColumnIndex = undefined;
                        var csvHeaders = [];
                        table.appendTo('#listview');
                        table.append(thead);
                        thead.append(theadtr);
                        $.each(data.columns, function(index, column) {
                            if (!column.hidden) {
                                theadtr.append($('<th>' + column.label + '</th>'));
                                if (column.fieldNameOrPath == 'CreatedDate') {
                                    defaultSortIndex = index;
                                    createdDateColumnIndex = index;
                                }
                                else if(column.fieldNameOrPath == 'Type') {
                                    typeColumnIndex = index;
                                }
                                else if(column.fieldNameOrPath == 'StageName') {
                                    stageColumnIndex = index;
                                }
                                csvHeaders.push(column.fieldNameOrPath);
                            }
                        });
                        csvData.push(csvHeaders);

                        // Add the rows
                        var tbody = $('<tbody></tbody');
                        table.append(tbody);
                        $.each(fullRecordList, function(rowIndex, record) {
                            var csvRows = [];
                            var tbodytr = $('<tr></tr>');
                            var recordId;
                            tbody.append(tbodytr);
                            $.each(data.columns, function(index, column) {
                                if (column.fieldNameOrPath === 'Id') {
                                    recordId = record[column.fieldNameOrPath];
                                }
                            });
                            $.each(data.columns, function(colIndex, column) {
                                if (!column.hidden) {
                                    var fieldNameSplit = column.fieldNameOrPath.split('.');
                                    var fieldValue;
                                    for (var i = 0; i < fieldNameSplit.length; i++) {
                                        var field = fieldNameSplit[i];
                                        if (i == 0) fieldValue = record[field];
                                        else if(fieldValue != null) fieldValue = fieldValue[field];
                                        if (column.type == 'date' || column.type == 'datetime') {
                                            fieldValue = moment(fieldValue).format('L');
                                        }
                                    }

                                    if (column.fieldNameOrPath === "Name") {
                                        tbodytr.append($(buildLink(fieldValue, recordId)));
                                    }
                                    else {
                                        tbodytr.append($('<td>' +
                                            (fieldValue != null ? fieldValue : '') +
                                            '</td>'));
                                    }

                                    if(column.fieldNameOrPath === "Type") {
                                        typeSelectOptions.addUnique(fieldValue);
                                    }

                                    if(column.fieldNameOrPath === "StageName") {
                                        stageSelectOptions.addUnique(fieldValue);
                                    }

                                    csvRows.push('"'+fieldValue+'"');
                                }
                            });

                            csvData.push(csvRows);
                        });

                        // Enhance this boring old HTML table with JQuery DataTable!
                        var dataTable = table.DataTable({
                            "language": {
                                "paginate": {
                                    "previous": "<",
                                    "next": ">"
                                }
                            },
                            "bInfo": false,
                            "order": [[defaultSortIndex, "desc"]],
                            "dom": 'Bfrtip',
                            "buttons": [
                                {
                                    text: 'Export',
                                    extend: 'csv',
                                    title: 'export'
                                }
                            ],
                            "initComplete": function () {
                                this.api().columns().every( function () {
                                    var column = this;
                                    if(typeColumnIndex && typeColumnIndex == column[0][0] && ('{!ObjectType}' == 'Account' || '{!ObjectType}' == 'Opportunity'))  {
                                        // build the type filter dropdown
                                        var selectType = $('<select class="select-dropdown cs-skin-border"/>')
                                            .appendTo('#selectType')
                                            .on( 'change', function () {
                                                var val = $.fn.dataTable.util.escapeRegex(
                                                    $(this).val()
                                                );

                                                column
                                                    .search( val ? '^'+val+'$' : '', true, false )
                                                    .draw();
                                            } );

                                        typeSelectOptions.sort();
                                        for (var i = typeSelectOptions.length - 1; i >= 0; i--) {
                                            var option = typeSelectOptions[i];
                                            selectType.append('<option value="'+(option == null ? '' : option)+'">'+(option == null ? '' : option)+'</option>');
                                        }

                                        if(typeSelectOptions.indexOf('Home Owner') !== -1) {
                                            selectType.val('Home Owner');
                                            selectType.trigger('change');
                                        }
                                    }
                                    else if(!typeColumnIndex) {
                                        $("#typeFilter").hide();
                                    }

                                    if(stageColumnIndex && stageColumnIndex == column[0][0] && '{!ObjectType}' == 'Opportunity')  {
                                        // build the type filter dropdown
                                        var selectStage = $('<select class="select-dropdown cs-skin-border"><option value="" label=""/></select>')
                                            .appendTo('#selectStage')
                                            .on( 'change', function () {
                                                var val = $.fn.dataTable.util.escapeRegex(
                                                    $(this).val()
                                                );
                                                val = val.replace(/\\/, "");

                                                column
                                                    .search( val ? '^'+val+'$' : '', true, false )
                                                    .draw();
                                            } );

                                        stageSelectOptions.sort();
                                        for (var i = stageSelectOptions.length - 1; i >= 0; i--) {
                                            var option = stageSelectOptions[i];
                                            selectStage.append('<option value="'+(option == null ? '' : option)+'">'+(option == null ? '' : option)+'</option>');
                                        }
                                    }
                                    else if(!stageColumnIndex) {
                                        $("#stageFilter").hide();
                                    }
                                });
                            }
                        });

                        // filter the list based on min/max dates
                        if(createdDateColumnIndex !== undefined) {
                            $("#dateFilter").show();
                            $('#min, #max').change( function() {
                                dataTable.draw();
                            });
                            $('#min').val(moment(new Date()).subtract(2, 'month').format('MM/DD/YYYY'));
                            $('#max').val(moment(new Date()).format('MM/DD/YYYY'));
                            $("#max").trigger('change');
                        }
                        else {
                            $("#dateFilter").hide();
                            $('#min').val('');
                            $('#max').val('');
                            dataTable.draw();
                        }

                        // move the export button to a better place
                        $("#exportButtonContainer").empty();
                        // only show if the attribute is true
                        if({!ShowExportButton}) {
                            $(".buttons-csv").appendTo("#exportButtonContainer").removeClass().addClass("btn btn-secondary btn--small").css("float", "right");
                        } else {
                            $("#exportButtonContainer").hide();
                            $(".buttons-csv").hide();
                        }

                        // move the search input to a better place
                        $('#searchContainer').empty();
                        $(".dataTables_filter input").appendTo("#searchContainer");
                        $(".dataTables_filter").empty();
                        $("#searchContainer").append('<i class="icon icon-magnifying-glass"></i>');

                        $("#spinner").hide();
                        $("#listview").show();
                    }
                });
            }
        });

        // Create dropdown to list List View names
        var objectSelect = $('<select class="select-dropdown cs-skin-border"/>');
        objectSelect.appendTo('#selectObject');
        objectSelect.change(function() { // On change...

            // Clear current List View info
            $('#selectListView').find('option').remove();
            $('#listview').empty();
            $('#soql').text('');

            // Selected Object
            // var objectName = $(this).find('option:selected').val();
            var objectName = '{!ObjectType}';

            // Call the List View API to obtain a list of List Views for the selected object
            $.ajax({
                url: '/services/data/v32.0/sobjects/' + objectName + '/listviews',
                headers: {
                    'Authorization': 'Bearer {!$Api.Session_ID}'
                },
                datatype: 'json',
                success: function(data, textStatus, jqXHR) {
                    data.listviews.sort(dynamicSort('label'));
                    var defaultListId;
                    $.each(data.listviews, function(index, obj) {
                        if (obj.developerName == 'Community_Default')
                            defaultListId = obj.id;
                        if(obj.developerName.indexOf('RecentlyViewed') === -1)
                            listViewSelect
                                .append($("<option></option>")
                                    .attr("value", obj.id)
                                    .text(obj.label));
                    });

                    if (defaultListId) {
                        $(listViewSelect).val(defaultListId);
                    }

                    listViewSelect.change();
                }
            });

        });

        // Call the SObject Describe API to list the objects in the org
        $.ajax({
            url: '/services/data/v32.0/sobjects',
            headers: {
                'Authorization': 'Bearer {!$Api.Session_ID}'
            },
            datatype: 'json',
            success: function(data, textStatus, jqXHR) {
                $.each(data.sobjects, function(index, obj) {
                    if (obj.queryable && obj.searchable)
                        objectSelect
                        .append($("<option></option>")
                            .attr("value", obj.name)
                            .text(obj.label));
                });
                objectSelect.change();
            }
        });
    });
    </script>
    <div class="row" style="margin-top: 1rem; margin-bottom: 1rem;">
        <div class="col-xs-6 col-md-6">
            <a class="btn btn-primary btn--small" style="float: left;" onclick="accDropDown()" id="newRecordButton">New {!ObjectLabel}</a>
            <br/><br/><div id="myDropdown" style="margin-top:-10px;border-radius:4px;text-color:white;background-color:#016ca7;" class="dropdown-content">
            </div>
        </div>
        <div class="col-xs-6 col-md-6" id="exportButtonContainer"></div>
    </div>
    <div class="table-container">
        <form>
            <div class="row">
                <div class="col-xs-12 col-md-6">
                    <div class="form-group">
                        <label for="selectListView">List View:</label>
                        <div id="selectListView" class="input-container input-container--icon icon-right"/>
                    </div>
                </div>
                <div class="col-xs-12 col-md-6" id="typeFilter">
                    <div class="form-group">
                        <label for="selectType">Type:</label>
                        <div id="selectType" class="input-container input-container--icon icon-right"/>
                    </div>
                </div>
                <div class="col-xs-12 col-md-6" id="stageFilter">
                    <div class="form-group">
                        <label for="selectStage">Stage:</label>
                        <div id="selectStage" class="input-container input-container--icon icon-right"/>
                    </div>
                </div>
                <div class="col-xs-12 col-md-6" id="dateFilter">
                    <div class="form-group">
                        <label for="date">Created:</label>
                            <div class="input-container input-container--icon icon-right datepicker" style="width: 132px;">
                                <input type="text" id="min" name="min" placeholder="MM / DD / YYYY"/> <i class="icon icon-calendar"></i>
                            </div>
                            <div class="input-container input-container--icon icon-right datepicker" style="width: 132px; margin-left: 0.5rem;">
                                <input type="text" id="max" name="max" placeholder="MM / DD / YYYY"/> <i class="icon icon-calendar"></i>
                            </div>
                    </div>
                </div>
                <div class="col-xs-12 col-md-6">
                    <div class="form-group">
                        <label>Search:</label>
                        <div id="searchContainer" class="input-container input-container--icon icon-left"/>
                    </div>
                </div>
            </div>
        </form>
        <div id="listview"/>
        <div id="spinner" class="spinner spinner--center"></div>
    </div>
</apex:component>